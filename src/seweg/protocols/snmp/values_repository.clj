(ns seweg.protocols.snmp.values-repository
  (:use [clojure.set :only (map-invert)])
  (:require [seweg.protocols.snmp.oid-repository :as oids]))

(def ^{:private true :dynamic true} *repository*
  {[1 3 6 1 2 1 2 2 1 3 1] "null"
   [1 3 6 1 2 1 2 2 1 3 6] "ethernet"
   [1 3 6 1 2 1 2 2 1 3 18] "T1-E1"
   [1 3 6 1 2 1 2 2 1 3 20] "basicISDN"
   [1 3 6 1 2 1 2 2 1 3 21] "primaryISDN"
   [1 3 6 1 2 1 2 2 1 3 22] "p2p-serial"
   [1 3 6 1 2 1 2 2 1 3 23] "ppp"
   [1 3 6 1 2 1 2 2 1 3 24] "softwareLoopback"
   [1 3 6 1 2 1 2 2 1 3 53] "propVirtual"
   [1 3 6 1 2 1 2 2 1 3 63] "ISDN"
   [1 3 6 1 2 1 2 2 1 3 77] "LinkAccessProtocolD"
   [1 3 6 1 2 1 2 2 1 3 81] "DigitalSignalLevel0"
   [1 3 6 1 2 1 2 2 1 3 101] "voiceFXO"
   [1 3 6 1 2 1 2 2 1 3 131] "tunnel"
   [1 3 6 1 2 1 2 2 1 3 135] "l2vlan"
   [1 3 6 1 2 1 2 2 1 3 136] "l3vlan"
   [1 3 6 1 2 1 2 2 1 3 137] "l3ipxvlan"
   [1 3 6 1 2 1 2 2 1 3 150] "mplsTunnel"
   [1 3 6 1 2 1 2 2 1 3 166] "mpls"
   [1 3 6 1 2 1 2 2 1 3 169] "shdsl"
   [1 3 6 1 2 1 2 2 1 3 203] "sipTg"
   [1 3 6 1 2 1 2 2 1 3 204] "sipSig"
   [1 3 6 1 2 1 2 2 1 3 209] "bridge"
   [1 3 6 1 2 1 2 2 1 7 1] "up"
   [1 3 6 1 2 1 2 2 1 7 2] "down"
   [1 3 6 1 2 1 2 2 1 8 1] "up"
   [1 3 6 1 2 1 2 2 1 8 2] "down"
   [1 3 6 1 2 1 2 2 1 8 3] "testing"
   [1 3 6 1 2 1 2 2 1 8 4] "unknown"
   [1 3 6 1 2 1 2 2 1 8 5] "dormant"
   [1 3 6 1 2 1 2 2 1 8 6] "notPresent"
   [1 3 6 1 2 1 2 2 1 8 7] "lowerLayerDown"
   [1 3 6 1 2 1 4 21 1 8 2] "invalid"
   [1 3 6 1 2 1 4 21 1 8 3] "direct"
   [1 3 6 1 2 1 4 21 1 8 4] "indirect"
   [1 3 6 1 2 1 4 22 1 4 1] "other"
   [1 3 6 1 2 1 4 22 1 4 2] "invalid"
   [1 3 6 1 2 1 4 22 1 4 3] "dynamic"
   [1 3 6 1 2 1 4 22 1 4 4] "static"
   [1 3 6 1 2 1 17 4 3 1 3 1] "other"
   [1 3 6 1 2 1 17 4 3 1 3 2] "invalid"
   [1 3 6 1 2 1 17 4 3 1 3 3] "learned"
   [1 3 6 1 2 1 17 4 3 1 3 4] "self"
   [1 3 6 1 2 1 17 4 3 1 3 5] "mgmt"
   ;; Devices Types
   ;; Cisco
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 222] "7206"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 223] "7204VXR "
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 229] "MGX8830 "
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 248] "catalyst3524XL"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 278] "cat3548XL"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 282] "cat6506 "
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 323] "catalyst295012"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 324] "catalyst295024"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 325] "catalyst295024C"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 366] "catalyst355024"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 367] "catalyst355048"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 388] "12406"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 394] "12410"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 414] "3725"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 428] "catalyst295024G"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 429] "catalyst295048G"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 431] "catalyst355012G"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 444] "1721"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 472] "catalyst295024GDC"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 485] "catalyst355024PWR"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 497] "831"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 543] "3825"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 516] "catalyst37xxStack"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 563] "catalyst356024PS"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 559] "catalyst295048T"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 564] "catalyst356048PS"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 568] "876"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 570] "878"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 571] "871"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 576] "2811"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 577] "2821"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 578] "2851"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 614] "catalyst3560G24PS"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 616] "catalyst3560G48PS"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 619] "2801"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 620] "1841"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 633] "ciscoNme16Es1Ge"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 634] "catalyst356048TS"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 642] "1812"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 657] "WSC6504E"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 679] "As5350XM"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 694] "catalyst296024"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 695] "catalyst296048"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 697] "catalyst2960G48"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 798] "catalyst29608TC"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 821] "7201"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 837] "881"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 838] "881G"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 858] "892"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 950] "catalyst296024PC"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1016] "catalyst296048PSTL"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1021] "catalyst3560v224ps"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1025] "catalyst3560v248ps"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1041] "3945"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1042] "3925"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1043] "2951"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1045] "2911"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1046] "2901 "
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1047] "1941 "
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1147] "catalyst296024PCS"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1148] "catalyst296048PSTS"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1191] "cisco1921k9"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1208] "cat29xxStack"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1273] "886Va"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1316] "catalystC2960CG"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1364] "catwsC2960C8tcS"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1395] "881GUK9"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 9 1 1144] "cisco3925SPE200"
   ;; HP
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 25506 11 2 1] "A-MSR900"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 25506 11 2 14] "A-MSR30-16"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 25506 11 2 3] "A-MSR20-10"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 25506 1 70] "MSR20-20"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 25506 1 72] "MSR20-40"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 25506 1 217] "MSR30-16 "
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 25506 1 229] "MSR20-10"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 25506 1 523]  "MSR900"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 25506 11 2 8] "A-MSR20-20"
   [1 3 6 1 2 1 1 2 1 3 6 1 4 1 25506 11 2 15] "A-MSR30-20"
   })



(defn get-known-value [variable-binding]
  "For some values there are predefined values.
  OIDs like InterfaceType or DeviceType."
  (let [oid (-> variable-binding keys first)
        value (-> variable-binding vals first)
        known-oid (first (oids/split-oid oid))]
    {oid (or (get *repository* (try
                               (cond
                                 (vector? value) (into known-oid (seq value))
                                 (number? value) (conj known-oid (int value))
                                 :else nil)
                               (catch Exception e nil)))
             value)}))
